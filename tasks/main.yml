---
# tasks file for docker

- name: Install some essential software
  yum:
    name: "{{item}}"
    state: installed
  with_items:
    - unzip
    - vim
  tags:
    - essential

- name: Install docker yum repository
  template: src="{{item.src}}" dest="{{item.dest}}" owner="{{item.owner|default('root')}}" group="{{item.group|default('root')}}" mode="{{item.mode|default('0644')}}"
  with_items:
    - { src: "dockerproject.repo.j2", dest: "/etc/yum.repos.d/dockerproject.repo" }
  tags:
    - yum
    - repo

#  enablerepo=rhel-7-server-extras-rpms
- name: Install docker engine
  yum: name="{{item}}" state=installed
  with_items:
    - docker-engine
    - docker-engine-selinux
    - python-docker-py

- name: Allow Docker Swarm traffic in firewall
  firewalld: port="{{item}}" permanent=true state=enabled immediate=true
  with_items:
    - 2377/tcp
    - 4243/tcp
    - 4789/udp
    - 7946/udp
    - 7946/tcp
  when: run_docker_swarm|bool

- name: Expose docker-api on the network
  template:
    src: "docker.service.j2"
    dest: "/etc/systemd/system/docker.service"
    owner: root
    group: root
    mode: 0644

- name: Reload systemd and start docker
  systemd:
    daemon_reload: true
    name: docker
    state: started
    enabled: true

- name: Check if node is currently in a swarm
  stat: path=/var/lib/docker/swarm/state.json
  register: swarm_json
  when: run_docker_swarm|bool
  ignore_errors: yes

- name: Check if node is a manager in a swarm
  stat: path=/var/lib/docker/swarm/raft/
  register: swarm_raft
  when: run_docker_swarm|bool
  ignore_errors: yes

#- name: Debug play_hosts
#  debug:
#    var: play_hosts

- name: Initialize a docker swarm (when no current swarm is found)
  command: creates=/var/lib/docker/swarm/control.sock docker swarm init
  when:
    - run_docker_swarm|bool
    - swarm_json.stat.exists|bool == false
    - swarm_raft.stat.exists|bool == false
    - docker_swarm_role == 'manager'
    - ansible_hostname == play_hosts[0]
  register: swarm_init
  run_once: yes

- name: Get swarm join token for manager
  command: docker swarm join-token manager -q
  register: swarm_manager_token
  when:
    - run_docker_swarm|bool
    - swarm_raft.stat.exists|bool or swarm_init|changed
  run_once: true
  check_mode: false
  changed_when: false

- name: Get swarm join token for worker
  command: docker swarm join-token worker -q
  register: swarm_worker_token
  when:
    - run_docker_swarm|bool
    - swarm_raft.stat.exists|bool or swarm_init|changed
  run_once: true
  check_mode: false
  changed_when: false

#- name: debug join-token
#  debug: var=swarm_worker_token

- name: Join swarm (manager nodes)
  command: docker swarm join --token {{swarm_manager_token.stdout}} {{hostvars[play_hosts[0]].ansible_eth0.ipv4.address}}:2377
  ignore_errors: yes
  when:
    - docker_swarm_role == 'manager'
    - swarm_json.stat.exists|bool == false
    - not ansible_hostname == play_hosts[0]

- name: Join swarm (worker nodes)
  command: docker swarm join --token {{swarm_worker_token.stdout}} {{hostvars[play_hosts[0]].ansible_eth0.ipv4.address}}:2377
  ignore_errors: yes
  when:
    - docker_swarm_role == 'worker'
    - swarm_json.stat.exists|bool == false

- name: Fail for undefined swarm role
  fail:
    msg: "Docker_swarm_role is not manager or worker"
  when: docker_swarm_role == 'undefined'

- name: Docker pull docker-registry
  docker_image: name="registry" tag="2.6"
  when: run_docker_registry|bool

- name: Run docker-registry
  docker_container:
    name: registry
    image: registry
    published_ports:
      - "5000:5000"
    state: started
  when: run_docker_registry|bool
